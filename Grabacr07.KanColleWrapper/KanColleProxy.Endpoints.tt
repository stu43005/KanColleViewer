<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ output extension=".cs" #>
<#
	var endpoints = new[]
	{
		"/kcsapi/api_start2",
		"/kcsapi/api_port/port",
		"/kcsapi/api_get_member/basic",
		"/kcsapi/api_get_member/ship",
		"/kcsapi/api_get_member/ship2",
		"/kcsapi/api_get_member/ship3",
		"/kcsapi/api_get_member/slot_item",
		"/kcsapi/api_get_member/useitem",
		"/kcsapi/api_get_member/deck",
		"/kcsapi/api_get_member/deck_port",
		"/kcsapi/api_get_member/ndock",
		"/kcsapi/api_get_member/kdock",
		"/kcsapi/api_get_member/material",
		"/kcsapi/api_get_member/questlist",
		"/kcsapi/api_req_kousyou/createitem",
		"/kcsapi/api_req_kousyou/createship",
		"/kcsapi/api_req_sortie/battleresult",
		"/kcsapi/api_req_hokyu/charge",
		"/kcsapi/api_req_hensei/change",
		"/kcsapi/api_req_kaisou/powerup",
	};
#>
// 
// This file was generated by "KanColleProxy.Endpoints.tt"
// 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Linq;
using System.Threading.Tasks;
using Fiddler;

namespace Grabacr07.KanColleWrapper
{
	partial class KanColleProxy
	{
		// ReSharper disable InconsistentNaming

<#
	foreach (var endpoint in endpoints)
	{	
		var names = endpoint
			.Replace("/kcsapi/", "")
			.Replace("api_", "")
			.Split(new [] { '/' }, StringSplitOptions.RemoveEmptyEntries)
			.Distinct();

		var name = "api_" + string.Join("_", names);
#>
		/// <summary>
		/// エンド ポイント "<#= endpoint #>" からのセッションを配信します。
		/// </summary>
		public IObservable<Session> <#= name #>
		{
			get { return this.ApiSessionSource.Where(x => x.PathAndQuery == "<#= endpoint #>"); }
		}

<#
	}
#>
		// ReSharper restore InconsistentNaming
	}
}

<#+
	private class Node
	{
		public string Name { get; private set; }
		public List<string> Methods { get; private set; }
		public List<Node> Children { get; private set; }

		public Node(string name)
		{
			this.Name = name;
			this.Methods = new List<string>();
			this.Children = new List<Node>();
		}
	}
#>